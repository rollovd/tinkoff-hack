import telebot
import config
import random
import geocoder
import Processing
import time
import questions

process = Processing.Processing()
bot = telebot.TeleBot(config.TOKEN)

leaderboard = {'Jamil': 20, 'Dima': 11, 'Maria': 15, 'Kirill': 5, 'lamoureux': 9}

saved_facts = []
arenas = 3

quotes = [
    (
        '–ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫ —Ç–µ–º, –∫—Ç–æ —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç—Å—è –∏–∑–æ –¥–Ω—è –≤ –¥–µ–Ω—å. –ü–æ–ª–∞–≥–∞—é—â–∏–µ –Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –Ω–∏ –∫ —á–µ–º—É –Ω–µ –ø—Ä–∏–¥—É—Ç.',
        '–ú–æ—Ä–∏—Ö—ç–π –£—ç—Å–∏–±–∞'),
    (
        '–ü—Ä–∏—á–∏–Ω–∞ –º–æ–µ–≥–æ –ø—Ä–æ–≤–∞–ª–∞ –æ—á–µ–≤–∏–¥–Ω–∞: —è –º–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª—Å—è. –ò –∫—Ä–æ–º–µ —Ç–æ–≥–æ, —è –º–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª—Å—è. –ò –µ—â–µ ‚Äî —è –º–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª—Å—è. –≠—Ç–æ –µ—Å–ª–∏ —Ç–∞–∫, –≤–∫—Ä–∞—Ç—Ü–µ.',
        '–•–∞—Ä—É–∫–∏ –ú—É—Ä–∞–∫–∞–º–∏'),
    (
        '–†–∞–∑—É–º –≤—Å–µ–≥–¥–∞ —Å–¥–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º, –Ω–µ —Ç–µ–ª–æ. –°–µ–∫—Ä–µ—Ç –≤ —Ç–æ–º, —á—Ç–æ–±—ã –∑–∞—Å—Ç–∞–≤–∏—Ç—å —Ç–≤–æ–π —Ä–∞–∑—É–º —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Ç–µ–±—è, –∞ –Ω–µ –ø—Ä–æ—Ç–∏–≤ —Ç–µ–±—è.',
        '–ê—Ä–Ω–æ–ª—å–¥ –®–≤–∞—Ä—Ü–µ–Ω–µ–≥–≥–µ—Ä')
]

@bot.message_handler(commands=['start'])
def start_command(message):
    global my_name

    img = open('images\oleggo.jpg', 'rb')
    bot.send_photo(message.chat.id, img)

    my_name = message.from_user.first_name

    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, <b>{my_name}</b>, –º–µ–Ω—è –∑–æ–≤—É—Ç –±–æ—Ç <b>–û–ª–µ–≥</b>!'
                                          f' –Ø –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¢–∏–Ω—å–∫–æ—Ñ—Ñ. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —è –º–æ–≥—É —Å—Ç–∞—Ç—å –∏ —Ç–≤–æ–∏–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ñ–µ—Ä–µ!'
                                          f' –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–≤—ã—Å–∏—Ç—å —Ç–≤–æ—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å, —É–∑–Ω–∞—Ç—å –æ–± –∞–∫—Ü–∏—è—Ö –º–Ω–æ–≥–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏ –≤ —Ü–µ–ª–æ–º —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å–≤–æ–π –∫—Ä—É–≥–æ–∑–æ—Ä!'
                                          f' –°–æ—Ä–µ–≤–Ω—É–π—Å—è –≤ –∑–Ω–∞–Ω–∏—è—Ö —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –∑–∞–Ω–∏–º–∞–π—Å—è —Å–ø–æ—Ä—Ç–æ–º –∏ —ç–∫–æ–Ω–æ–º—å, –∏–≥—Ä–∞—è –≤ OlegGo!.'
                                          f'\n–•–æ—á–µ—à—å –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É? ü§†',
                         parse_mode='html')

    text_info = f'–¢—ã –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª—é–±–æ–π –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥:\n' \
                f'1) /game - –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —Ç–µ–±–µ —Å—ã–≥—Ä–∞—Ç—å –≤ OlegGo;\n' \
                f'2) /saved_facts - –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–±–µ —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ñ–∞–∫—Ç–æ–≤;\n' \
                f'3) /shop - –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª–∏—Ç —Ç–µ–±–µ –ø–æ—à–æ–ø–∏—Ç—å—Å—è;\n' \
                f'4) /leaderboard - –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞\n'

    bot.send_message(message.chat.id, text_info)

@bot.message_handler(commands=['game'])
def game_command(message):
    markup = telebot.types.InlineKeyboardMarkup(row_width=4)
    item1 = telebot.types.InlineKeyboardButton('–ò–≥—Ä–∞—Ç—å! ‚úåüèº', callback_data='play')
    item2 = telebot.types.InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –ê—Ä–µ–Ω—ã! ü§º', callback_data='show_arena')
    markup.add(item1)
    markup.add(item2)

    bot.send_message(message.chat.id, f'–í–æ —á—Ç–æ —Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å, {message.from_user.first_name}?',
                     reply_markup=markup)


@bot.message_handler(commands=['saved_facts'])
def game_command(message):

    if not saved_facts:
        header = '–£ —Ç–µ–±—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ :(\n–ò–≥—Ä–∞–π –≤ OlegGo –∏ —É–∑–Ω–∞–≤–∞–π –º–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ!'

    else:
        header = '<b>Saved facts</b>\n\n'
        for num_fact, fact in enumerate(list(set(saved_facts))):
            row_text = f'{num_fact+1}) {fact}.\n\n'
            header += row_text

    bot.send_message(message.chat.id, header,
                     parse_mode='html')

@bot.message_handler(commands=['shop'])
def game_command(message):
    markup = telebot.types.InlineKeyboardMarkup(row_width=4)
    item1 = telebot.types.InlineKeyboardButton('–ö—É–ø–∏—Ç—å —à–∞–≥–∏!', callback_data='buy_steps')
    item2 = telebot.types.InlineKeyboardButton('–ö—É–ø–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏!', callback_data='buy_hints')
    markup.add(item1)
    markup.add(item2)

    bot.send_message(message.chat.id, f'–ß—Ç–æ —Ö–æ—á–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?',
                     reply_markup=markup)

@bot.message_handler(commands=['leaderboard'])
def game_command(message):
    sort_leaderboard = {k: v for k, v in sorted(leaderboard.items(), key=lambda item: item[1], reverse=True)}
    header = '<b>Leaderboard</b>\n\n'

    for place, (nick, score) in enumerate(sort_leaderboard.items()):
        row_text = f'{place + 1} place. Nick: <b>{nick}</b>, Score: <b>{score}</b>\n\n'
        header += row_text

    bot.send_message(message.chat.id, header,
                      parse_mode='html')

@bot.callback_query_handler(func=lambda cell: True)
def callback_inline(call):
    try:
        if call.message:
            callback_data = call.data

            if callback_data == 'show_arena':
                if not arenas:
                    text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è, —Ç–∞–∫ –∫–∞–∫ —É –í–∞—Å <b>–Ω–µ—Ç</b> –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –∞—Ä–µ–Ω :(\n' \
                           '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /game, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞.'
                    bot.send_message(call.message.chat.id, text, parse_mode='html')

                else:
                    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
                    item1 = telebot.types.InlineKeyboardButton('–î–∞', callback_data='training')
                    item2 = telebot.types.InlineKeyboardButton('–ù–µ—Ç', callback_data='to_game')
                    markup.add(item1)
                    markup.add(item2)

                    text = f'–ê –≤—ã –Ω–µ –ø—Ä–æ–º–∞—Ö! –í—ã –∑–∞—Ö–≤–∞—Ç–∏–ª–∏ {arenas} –∞—Ä–µ–Ω—É(—ã)! –ñ–µ–ª–∞–µ—Ç–µ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è?'
                    bot.send_message(call.message.chat.id, text, reply_markup=markup)

            elif callback_data == 'buy_steps':
                bot.send_message(call.message.chat.id, f'–≠—Ç–æ –¥–µ–º–æ-–≤–∞—Ä–∏–∞–Ω—Ç. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.\n'
                                                       f'–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /game')

            elif callback_data == 'buy_hints':
                bot.send_message(call.message.chat.id, f'–≠—Ç–æ –¥–µ–º–æ-–≤–∞—Ä–∏–∞–Ω—Ç. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.\n'
                                                       f'–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /game')

            elif callback_data == 'to_game':
                markup = telebot.types.InlineKeyboardMarkup(row_width=4)
                item1 = telebot.types.InlineKeyboardButton('–î–∞', callback_data='play')
                item2 = telebot.types.InlineKeyboardButton('–ù–µ—Ç', callback_data='bye-bye')
                markup.add(item1)
                markup.add(item2)

                bot.send_message(call.message.chat.id, f'–¢–æ–≥–¥–∞ –ø–æ–∏–≥—Ä–∞–µ–º?',
                                 reply_markup=markup)

            elif callback_data == 'play':
                markup = telebot.types.InlineKeyboardMarkup(row_width=4)
                item1 = telebot.types.InlineKeyboardButton('–ü–æ–ª–æ–≤–∏–º –û–ª–µ–≥–∞! üèÉüèº', callback_data='catch_oleg')
                item2 = telebot.types.InlineKeyboardButton('–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞ –ê—Ä–µ–Ω–∞—Ö! üí™', callback_data='arena_play')
                markup.add(item1)
                markup.add(item2)

                bot.send_message(call.message.chat.id, f'–ü–æ–π–º–∞–µ–º –û–ª–µ–≥–∞ –∏–ª–∏ –ø–æ—Å–æ—Ä–µ–≤–Ω—É–µ–º—Å—è?',
                                 reply_markup=markup)

            elif callback_data == 'arena_play':
                bot.send_message(call.message.chat.id, f'–¢–∞–∫-—Å, –æ–ø—Ä–µ–¥–µ–ª—è—é —Ç–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é...')

                coords = geocoder.ip('me')
                bot.send_message(call.message.chat.id,
                                 f'–ê–≥–∞, —è —Ç–µ–±—è –Ω–∞—à—ë–ª! –í–æ—Ç —Ç–≤–æ–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {", ".join([str(x) for x in coords.latlng])}')

                bot.send_message(call.message.chat.id,
                                 f'–ò—â—É –±–ª–∏–∂–∞–π—à–∏–µ –ê—Ä–µ–Ω—ã...')
                time.sleep(1.5)

                markup = telebot.types.InlineKeyboardMarkup(row_width=4)
                item1 = telebot.types.InlineKeyboardButton('–î–∞', callback_data='yes_capture_arena')
                item2 = telebot.types.InlineKeyboardButton('–ù–µ—Ç', callback_data='no_capture_arena')
                markup.add(item1)
                markup.add(item2)
                bot.send_message(call.message.chat.id, '–¢–∞–∫-—Å, —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π –µ—Å—Ç—å –æ–¥–Ω–∞ –ê—Ä–µ–Ω–∞. –•–æ—á–µ—à—å –µ—ë –∑–∞—Ö–≤–∞—Ç–∏—Ç—å?',reply_markup=markup)

            elif callback_data == 'no_capture_arena':
                bot.send_message(call.message.chat.id, '–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã, –Ω–∞–∂–º–∏ –Ω–∞ /game')

            elif callback_data == 'quiz':
                global correct_quiz_answers
                correct_quiz_answers = 0

                quote_author = random.choice(quotes)

                quote = quote_author[0]
                author = quote_author[1]

                training_dict = questions.questions['playing']
                question_keys = random.sample(training_dict.keys(), len(training_dict))

                text = f"–ö–∞–∫ –≥–æ–≤–æ—Ä–∏–ª {author}: '{quote}'\n\n–ú–æ—Ç–∏–≤–∏—Ä—É–µ—Ç? –¢–æ–≥–¥–∞ –Ω–∞—á–Ω—ë–º –Ω–∞—à —Ç–µ—Å—Ç!\n\n–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å, –±—É–¥–µ—Ç {len(training_dict)} –≤–æ–ø—Ä–æ—Å–∞. –ù–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –¥–∞—ë—Ç—Å—è 10 —Å–µ–∫—É–Ω–¥."
                bot.send_message(call.message.chat.id, text)

                time.sleep(7)
                for key in question_keys:
                    global current_quiz_answer
                    global quiz_link

                    info = training_dict[key]
                    question = info['question']
                    answers = info['answers']
                    current_quiz_answer = info['correct_answer']
                    quiz_link = info['link']

                    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
                    for i in range(info['quantity_answers']):
                        markup.add(telebot.types.KeyboardButton('–í–∞—Ä–∏–∞–Ω—Ç: ' + str(i + 1)))

                    text = question + answers + '\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞!'
                    bot.send_message(call.message.chat.id, text, reply_markup=markup)
                    time.sleep(10)

                bot.send_message(call.message.chat.id,
                                 f'–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {correct_quiz_answers}/{len(training_dict)} –≤–æ–ø—Ä–æ—Å–æ–≤.\n'
                                 f'–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è —á–µ—Ä–µ–∑ —á–∞—Å –∑–∞ –Ω–æ–≤—ã–º —Ç–µ—Å—Ç–æ–º!', reply_markup=markup)

                try:
                    leaderboard[my_name] += correct_quiz_answers
                except KeyError:
                    leaderboard[my_name] = correct_quiz_answers

                del quiz_link
                del current_quiz_answer
                bot.send_message(call.message.chat.id, '–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã, –Ω–∞–∂–º–∏ –Ω–∞ /game')

            elif callback_data == 'yes_capture_arena':
                markup = telebot.types.InlineKeyboardMarkup(row_width=4)
                item1 = telebot.types.InlineKeyboardButton('–ü–æ–µ—Ö–∞–ª–∏!', callback_data='quiz')
                markup.add(item1)

                bot.send_message(call.message.chat.id, '–ß—Ç–æ–±—ã –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –ê—Ä–µ–Ω—É, —Ç—ã –¥–æ–ª–∂–µ–Ω –ø–æ–±–µ–¥–∏—Ç—å –µ—ë –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ!\n–Ø –∑–∞–¥–∞–º —Ç–µ–±–µ 5 –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞ –∫–∞–∂–¥—ã–π –∏—Ö –Ω–∏—Ö —É —Ç–µ–±—è –±—É–¥–µ—Ç 15 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ.\n–ï—Å–ª–∏ –¥–∞—à—å –±–æ–ª—å—à–µ –æ—Ç–≤–µ—Ç–æ–≤, —á–µ–º —Ç–µ–∫—É—â–∏–π –≤–ª–∞–¥–µ–ª–µ—Ü - –ê—Ä–µ–Ω–∞ —Ç–≤–æ—è!\n–£–¥–∞—á–∏! ü¶Ñ', reply_markup=markup)

            elif callback_data == 'catch_oleg':
                bot.send_message(call.message.chat.id, f'–¢–∞–∫-—Å, –æ–ø—Ä–µ–¥–µ–ª—è—é —Ç–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é...')

                coords = geocoder.ip('me')
                bot.send_message(call.message.chat.id, f'–ê–≥–∞, —è —Ç–µ–±—è –Ω–∞—à—ë–ª! –í–æ—Ç —Ç–≤–æ–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {", ".join([str(x) for x in coords.latlng])}')

                bot.send_message(call.message.chat.id,
                                 f'–ò—â—É –±–ª–∏–∂–∞–π—à–∏—Ö –û–ª–µ–≥–æ–≤...')
                time.sleep(1.5)
                img = open('images\oleges.png', 'rb')
                bot.send_photo(call.message.chat.id, img)

                bot.send_message(call.message.chat.id, process.find_stores())

            elif callback_data == 'bye-bye':
                bot.send_message(call.message.chat.id, f'–¢–æ–≥–¥–∞ –ø–æ–∏–≥—Ä–∞–µ–º –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑! –ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å –µ—â—ë –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n'
                                                       f'1) /saved_facts\n2) /shop\n3) /leaderboard')

            elif callback_data == 'change_place':
                bot.send_message(call.message.chat.id, process.find_stores())

            elif callback_data == 'not_add_fact':
                bot.send_message(call.message.chat.id, '–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã, –Ω–∞–∂–º–∏ –Ω–∞ /game')

            elif callback_data == 'get_destination':
                global text_fact

                img = open(r'images\find_oleg.png', 'rb')
                bot.send_photo(call.message.chat.id, img)
                time.sleep(1.5)
                bot.send_message(call.message.chat.id, '–ú–æ–ª–æ–¥–µ—Ü, —Ç—ã –Ω–∞—à—ë–ª –û–ª–µ–≥–∞! –ó–∞ —ç—Ç–æ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å +1 –∫ —Ä–µ–π—Ç–∏–Ω–≥—É –∏ –æ–¥–Ω—É –º–æ–Ω–µ—Ç—É.')

                text_fact = random.choice(Processing.facts)
                bot.send_message(call.message.chat.id,
                                 f'–ö—Å—Ç–∞—Ç–∏, —Ç—ã –Ω–∞—à—ë–ª –û–ª–µ–≥–∞ –≤ "–ü–µ—Ä–µ–∫—Ä—ë—Å—Ç–∫–µ", –≥–¥–µ –∫–∞–∂–¥—ã–π –∫–ª–∏–µ–Ω—Ç –±–∞–Ω–∫–∞ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å {random.randint(3, 9)}% –∫–µ—à–±—ç–∫–∞ –Ω–∞ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É –æ—Ç 1000 —Ä—É–±–ª–µ–π.\n\n')
                time.sleep(1)

                markup = telebot.types.InlineKeyboardMarkup(row_width=4)
                item1 = telebot.types.InlineKeyboardButton('–î–∞!', callback_data='add_fact')
                item2 = telebot.types.InlineKeyboardButton('–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ.', callback_data='not_add_fact')
                markup.add(item1)
                markup.add(item2)

                bot.send_message(call.message.chat.id, f'–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ—Ç –û–ª–µ–≥–∞:\n{text_fact}', parse_mode='html')
                bot.send_message(call.message.chat.id, f'–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–∫—Ç –≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ?', reply_markup=markup)

            elif callback_data == 'add_fact':
                saved_facts.append(text_fact)
                bot.send_message(call.message.chat.id,
                                 '–§–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ /saved_facts üëç')
                bot.send_message(call.message.chat.id, '–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã, –Ω–∞–∂–º–∏ –Ω–∞ /game')

            elif callback_data == 'training':
                global correct_train_answers
                correct_train_answers = 0

                quote_author = random.choice(quotes)

                quote = quote_author[0]
                author = quote_author[1]

                training_dict = questions.questions['training']
                question_keys = random.sample(training_dict.keys(), len(training_dict))

                text = f"–ö–∞–∫ –≥–æ–≤–æ—Ä–∏–ª {author}: '{quote}'\n\n–ú–æ—Ç–∏–≤–∏—Ä—É–µ—Ç? –¢–æ–≥–¥–∞ –Ω–∞—á–Ω—ë–º –Ω–∞—à —Ç–µ—Å—Ç!\n\n–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å, –±—É–¥–µ—Ç {len(training_dict)} –≤–æ–ø—Ä–æ—Å–∞. –ù–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –¥–∞—ë—Ç—Å—è 10 —Å–µ–∫—É–Ω–¥."
                bot.send_message(call.message.chat.id, text)

                time.sleep(7)
                for key in question_keys:
                    global current_answer

                    info = training_dict[key]
                    question = info['question']
                    answers = info['answers']
                    current_answer = info['correct_answer']

                    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
                    for i in range(info['quantity_answers']):
                        markup.add(telebot.types.KeyboardButton('–û—Ç–≤–µ—Ç: ' + str(i+1)))

                    text = question + answers + '\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞!'
                    bot.send_message(call.message.chat.id, text, reply_markup=markup)
                    time.sleep(13)

                bot.send_message(call.message.chat.id, f'–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {correct_train_answers}/{len(training_dict)} –≤–æ–ø—Ä–æ—Å–æ–≤.\n'
                                                       f'–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è —á–µ—Ä–µ–∑ —á–∞—Å –∑–∞ –Ω–æ–≤—ã–º —Ç–µ—Å—Ç–æ–º!', reply_markup=markup)

                del current_answer
                bot.send_message(call.message.chat.id, '–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã, –Ω–∞–∂–º–∏ –Ω–∞ /game')

    except Exception as e:
        print(repr(e))

@bot.message_handler(content_types=['text'])
def send_message(message):
    if '–û—Ç–≤–µ—Ç' in message.text:
        global correct_train_answers
        value = int(message.text.split(' ')[1])

        try:
            if value == int(current_answer):
                bot.send_message(message.chat.id, '–ú–æ–ª–æ–¥–µ—Ü! –í—Å—ë –≤–µ—Ä–Ω–æ!')
                correct_train_answers += 1
            else:
                bot.send_message(message.chat.id, f'–ù–µ-–∞! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {current_answer}.')

        except NameError:
            pass

    elif '–í–∞—Ä–∏–∞–Ω—Ç' in message.text:
        global correct_quiz_answers
        value = int(message.text.split(' ')[1])

        try:
            if value == int(current_quiz_answer):
                text = '–ú–æ–ª–æ–¥–µ—Ü! –í—Å—ë –≤–µ—Ä–Ω–æ!'
                if quiz_link:
                    text += f'\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—á–∏—Ç–∞—Ç—å —Ç—É—Ç: {quiz_link}'

                bot.send_message(message.chat.id, text)
                correct_quiz_answers += 1
            else:
                text = f'–ù–µ-–∞! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {current_quiz_answer}.'
                if quiz_link:
                    text += f'\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—á–∏—Ç–∞—Ç—å —Ç—É—Ç: {quiz_link}'

                bot.send_message(message.chat.id, text)

        except NameError:
            pass

    elif isinstance(message.text, str) and len(message.text) <= 3:
        try:

            store_dict = {
                1: '–ü–µ—Ä–µ–∫—Ä—ë—Å—Ç–æ–∫',
                2: '–ú–∞–≥–Ω–∏—Ç',
                3: '–ü—è—Ç—ë—Ä–æ—á–∫–∞',
                4: 'BILLA'
            }

            markup = telebot.types.InlineKeyboardMarkup(row_width=5)
            item1 = telebot.types.InlineKeyboardButton('–Ø –Ω–∞ –º–µ—Å—Ç–µ! üëåüèª', callback_data='get_destination')
            item2 = telebot.types.InlineKeyboardButton('–•–æ—á—É –≤ –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ! üîÑ', callback_data='change_place')

            markup.add(item1)
            markup.add(item2)

            _ = store_dict[int(message.text)]

            img = open(f'images\oleg_{int(message.text)}.jpg', 'rb')
            bot.send_photo(message.chat.id, img)

            bot.send_message(message.chat.id, '–ü–æ–º—á–∞–ª–∏?', parse_mode='html',
                             reply_markup=markup
                             )

        except KeyError:
            bot.send_message(message.chat.id, f'–î—Ä—É–∂–æ–∫, —è –Ω–µ –≤–∏–∂—É —Ç–∞–∫–æ–π —Ü–∏—Ñ—Ä—ã... –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!üòâ')

if __name__ == "__main__":
    try:
        bot.polling(none_stop=True)

    except Exception as e:
        time.sleep(5)



